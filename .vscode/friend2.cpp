#include<iostream>
using namespace std;
class B;
class A{
    private:
        int x;
    public:
        int getx();
        friend void foo(A&);        //foo fonksiyonu class A ile arkadaÅŸ
        void sety(B&);             //aynÄ± getx() fonksiyonu gibi farkÄ± yok yapmaya Ã§aliÅŸtÄ±ÅŸtÄ±ÄŸÄ±m ÅŸey b nin iÃ§inde ki private olan sayÄ±yÄ± A class Ä±ndaki 
                                  //fonksiyon ile deÄŸiÅŸtirmek
};
class B{
    private:
        int y;
    public:
        int gety();
        friend class A;
};
int A::getx(){return x;}
int B::gety(){return y;}
void foo(A&a){a.x=100;}     //foo ile A arkadaÅŸ olduÄŸu iÃ§indeki private olan x e eriÅŸebilirim ArkadaÅŸlÄ±k bunu gerektirir ğŸ™‚
void A::sety(B&b){b.y=49;}  //bak canÄ±m fonk u yazarken A nÄ±n uzayÄ±nda oldÄŸunu belirtmen gerekiyor

int main()
{
    A n;
    B m;
    foo(n);
    cout<<n.getx()<<endl;    //cout<<n.x<<endl; simdi baby bÃ¶yle bir hata yaparsan private olan bir deÄŸere eriÅŸmeye Ã§alÄ±ÅŸÄ±rsÄ±n olmaz unutma ona
    n.sety(m);              //dÄ±ÅŸarÄ±ya Ã§ektiÄŸin getx fonksiyonuyla ulaÅŸabilirsin :)
                           //ama Ã§aÄŸÄ±rÄ±ken bunu yazmana gerek yok :)Unutma
    cout<<m.gety()<<endl; //ÅŸimdi Ã¶nemli bir not var ÅŸÃ¶yle ki getx e ulaÅŸÄ±rken nasÄ±l n.getx(); diye ulaÅŸÄ±yorsun Ã§Ã¼nkÃ¼ o baÄŸÄ±msÄ±z duran bir fonksiyon deÄŸil
                         //o A class Ä±na baÄŸlÄ± o yÃ¼zden set y nasÄ±l baÄŸÄ±msÄ±z gibi dursada baÄŸÄ±msÄ±z deÄŸil so Ã§aÄŸÄ±rÄ±rken n.sety(); yazmalÄ±yÄ±z
    return 0;
}
//ben bu kod da class larÄ±n iÃ§indeki privatelar bir(sadece okunur) deÄŸere sahip olmamasÄ±na ve set method u bulunmamasÄ±na raÄŸmen onlara 
//friend fonksiyon ve friend class ile deÄŸer verdim :)



